# File: booking-service/src/main/resources/application.yml
server:
  port: 8082

spring:
  application:
    name: booking-service
  profiles:
    active: dev

  # Database separato per Booking Service (microservizi pattern)
  datasource:
    url: jdbc:h2:mem:bookingdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: ""

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  h2:
    console:
      enabled: true
      path: /h2-console

  # Redis per distributed locking (mission-critical) - configurazione aggiornata
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 8
          min-idle: 0

# Eureka configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

# Feign configuration per chiamate a Movie Service
feign:
  client:
    config:
      movie-service:
        connect-timeout: 2000
        read-timeout: 5000
        logger-level: basic
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50

# Circuit Breaker per resilienza - configurazione corretta
resilience4j:
  circuitbreaker:
    instances:
      movie-service:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        sliding-window-size: 10
        minimum-number-of-calls: 5
  retry:
    instances:
      movie-service:
        max-attempts: 3
        wait-duration: 1s

# Actuator endpoints per monitoring mission-critical
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,threaddump
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# Logging configuration
logging:
  level:
    com.cinema.booking: DEBUG
    org.springframework.cloud.openfeign: DEBUG
    redis.clients.lettuce: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://localhost:5432/booking_db
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate