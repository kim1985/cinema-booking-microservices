# File: booking-service/src/main/resources/application.yml
server:
  port: 8082

spring:
  application:
    name: booking-service
  profiles:
    active: dev

  # Database separato per Booking Service (microservizi pattern)
  datasource:
    url: jdbc:h2:mem:bookingdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: ""

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  h2:
    console:
      enabled: true
      path: /h2-console

  # Configurazione Redis per gestire molte richieste simultanee
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 1000ms  # Tempo massimo per connessione
      lettuce:
        pool:
          max-active: 50   # Massimo connessioni simultanee
          max-idle: 20     # Connessioni mantenute in standby
          min-idle: 5      # Connessioni sempre disponibili
          max-wait: 500ms  # Tempo massimo attesa per connessione dal pool
        shutdown-timeout: 100ms

# Eureka configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90

# Feign configuration per chiamate veloci ai servizi esterni
feign:
  client:
    config:
      movie-service:
        connect-timeout: 1000    # Tempo massimo per stabilire connessione
        read-timeout: 2000       # Tempo massimo per ricevere risposta
        logger-level: none       # Disabilita log per velocit√†
  httpclient:
    enabled: true
    max-connections: 500         # Massimo connessioni totali
    max-connections-per-route: 100  # Massimo connessioni per servizio
    connection-timeout: 1000     # Timeout connessione HTTP
    connection-timer-repeat: 3000

# Circuit Breaker per gestire fallimenti dei servizi esterni
resilience4j:
  circuitbreaker:
    instances:
      movie-service:
        failure-rate-threshold: 70      # Percentuale errori prima di aprire circuito
        wait-duration-in-open-state: 5s # Tempo attesa prima di riprovare
        sliding-window-size: 20         # Numero chiamate da considerare
        minimum-number-of-calls: 10     # Chiamate minime prima di valutare
        slow-call-rate-threshold: 80    # Percentuale chiamate lente tollerata
        slow-call-duration-threshold: 2000ms
  retry:
    instances:
      movie-service:
        max-attempts: 2              # Numero massimo tentativi
        wait-duration: 100ms         # Pausa tra tentativi

# Actuator endpoints per monitoring mission-critical
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,threaddump
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# Logging configuration
logging:
  level:
    com.cinema.booking: DEBUG
    org.springframework.cloud.openfeign: DEBUG
    redis.clients.lettuce: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    url: jdbc:postgresql://localhost:5432/booking_db
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate